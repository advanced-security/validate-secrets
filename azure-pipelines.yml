# Variable 'BuildNumber' was defined in the Variables tab
# Variable 'Configuration' was defined in the Variables tab
# Variable 'Platform' was defined in the Variables tab
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - /Source.PLS
    exclude:
    - /Source
    - /Dependencies
    - /ThirdParty
    - /VPNClient
    - /APIM
    - /Relay
    - /Databases
    - /Source.Phase2
    - /Source.PLS/Build
name: 1.0.$(Year:yy)$(DayOfYear)$(Rev:.r)
jobs:
- job: Phase_1
  displayName: Phase 1
  cancelTimeoutInMinutes: 1
  pool:
    name: BTS2016
  steps:
  - checkout: self
    fetchTags: true
  - task: PowerShell@2
    displayName: Update versioning
    inputs:
      scriptName: Build/UpdateVersionInfo.ps1
      arguments: -pathToSearch "$(Build.SourcesDirectory)"
  - task: MSBuild@1
    displayName: Build supporting PowerShell modules
    inputs:
      solution: Build/PowerShellModules/PowerShellModules.sln
      msbuildVersion: "14.0"
      platform: $(Platform)
      configuration: $(Configuration)
      msbuildArguments: /p:OutputPath=$(Build.ArtifactStagingDirectory)
  - task: NuGetCommand@2
    displayName: Restore NuGet packages
        # OPTIONAL: Download CodeQL CLI Bundle
        # The CodeQL bundle (containing the CodeQL CLI as well as the pre-compiled CodeQL Query Suites, which is recommended for CI/CD integration) can either be download as part of the pipeline,
        # or pre-downloaded and placed on the CI/CD build machine(s). If pre-downloading, replace \path\to\cli in subsequent stages with the absolute path to the download location.
        # In this example, we download the latest CLI bundle (at time of writing) as part of the pipeline from https://github.com/github/codeql-action/releases, extract it and place it on the PATH.
  - task: PowerShell@2
    displayName: Download CodeQL CLI Bundle
    inputs:
      targetType: inline
      pwsh: true
      script: |
                    wget https://github.com/github/codeql-action/releases/latest/download/codeql-bundle-win64.tar.gz -O ..\codeql-bundle-win64.tar.gz
                    tar xzvf ..\codeql-bundle-win64.tar.gz -C ..\
                    del ..\codeql-bundle-win64.tar.gz
                    cd ..\; echo "##vso[task.prependpath]$pwd\codeql"



        # Initialize CodeQL
        # Create a skeleton structure for a CodeQL database that doesnâ€™t have a raw QL dataset yet, but is ready for running extractor steps
        # Prior to running any build commands, the generated scripts containing environment variables must be sourced.
        # Full documentation for database init step: https://codeql.github.com/docs/codeql-cli/manual/database-init/
  - task: PowerShell@2
    displayName: Initialize CodeQL database
    inputs:
        # Assumes the source code is checked out to the current working directory.
        # Creates a database at `<current working directory>/db`.
        # Running on Windows, so specifies a trace process level.
        targetType: inline
        pwsh: true
        script: |
                      echo $env:PATH
                      codeql database init --language csharp --trace-process-name Agent.Worker.exe --source-root . --begin-tracing db

        # Source environment variables
        # Read the generated environment variables and values, and set them so they are available for subsequent commands in the build pipeline. This is done in PowerShell in this example.
  - task: PowerShell@2
    displayName: Set CodeQL environment variables
    inputs:
      targetType: inline
      pwsh: true
      script: |
                 $json = Get-Content $(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/start-tracing.json | ConvertFrom-Json
                 $json.PSObject.Properties | ForEach-Object {
                     $template = "##vso[task.setvariable variable="
                     $template += $_.Name
                     $template += "]"
                     $template += $_.Value
                     echo "$template"
                 }

        # Run build commands
        # In this example, we have a simple C# application built using VSBuild.
  - task: PowerShell@2
    displayName: Dummy build
    inputs:
      targetType: inline
      script: |
                 echo "Build steps here"

        # Read and set the generated environment variables to end build tracing. This is done in PowerShell in this example.
  - task: PowerShell@2
    displayName: Clear CodeQL environment variables
    inputs:
      targetType: inline
      pwsh: true
      script: |
                 $json = Get-Content $(System.DefaultWorkingDirectory)/db/temp/tracingEnvironment/end-tracing.json | ConvertFrom-Json
                 $json.PSObject.Properties | ForEach-Object {
                     $template = "##vso[task.setvariable variable="
                     $template += $_.Name
                     $template += "]"
                     $template += $_.Value
                     echo "$template"
                 }

        # Finalize CodeQL Database
        # Finalize a database that was created with codeql database init and subsequently seeded with analysis data using codeql database trace-command.
        # This needs to happen before the new database can be queried.
        # Full documentation for database finalize step: https://codeql.github.com/docs/codeql-cli/manual/database-finalize/
  - task: CmdLine@2
    displayName: Finalize CodeQL database
    inputs:
      script: 'codeql database finalize db'

        # Analyze CodeQL Database
        # Analyze a CodeQL database, producing meaningful results in the context of the source code.
        # Run a query suite (or some individual queries) against a CodeQL database, producing results, styled as alerts or paths, in SARIF or another interpreted format.
        # Note that the suite argument can accept one of the pre-compiled, out-of-the-box query suites: code-scanning, security-extended, or security-and-quality
        # Full documentation for database analyze step: https://codeql.github.com/docs/codeql-cli/manual/database-analyze/
  - task: CmdLine@2
    displayName: Analyze CodeQL Database
    inputs:
        script: "codeql database analyze db csharp-security-and-quality.qls --format=sarif-latest --output=.\temp\results-csharp.sarif"

        # Upload results to GitHub
        # Uploads a SARIF file to GitHub code scanning.
        # For context, please see https://docs.github.com/en/rest/reference/code-scanning#upload-an-analysis-as-sarif-data
        # A GitHub Apps token or personal access token must be set. For best security practices, it is recommended to set the --github-auth-stdin flag and pass the token to the command through standard input. Alternatively, the GITHUB\_TOKEN environment variable can be set.
        # This token must have the security\_events scope.
        # Documentation for creating GitHub Apps or Personal Access Tokens are available here: https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
        # Full documentation for github upload-results step: https://codeql.github.com/docs/codeql-cli/manual/github-upload-results/
  - task: CmdLine@2
    displayName: Upload results to GitHub
    inputs:
        script: "codeql github upload-results --sarif=.\temp\results-csharp.sarif --github-auth-stdin --github-url=https://github.com/ --repository=octo-org/example-repo-2 --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718"

        # Other tasks go here